jpa配置：
	spring.jpa.properties.hibernate.hbm2ddl.auto=update
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
	spring.jpa.show-sql= true
	其实这个 hibernate.hbm2ddl.auto 参数的作用主要用于：自动创建|更新|验证数据库表结构,有四个值：
		create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
		create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。
		update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
		validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
		dialect 主要是指定生成表名的存储引擎为 InnoDBD
		show-sql 是否打印出自动生成的 SQL，方便调试的时候查看

配置thymeleaf视图解析器：
	#thymeleaf start
	spring.thymeleaf.mode=HTML5
	spring.thymeleaf.encoding=UTF-8
	spring.thymeleaf.content-type=text/html
	#开发时关闭缓存,不然没法看到实时页面
	spring.thymeleaf.cache=false
	#thymeleaf end
	
	你可能会发现在默认配置下，thymeleaf对.html的内容要求很严格，比如<meta charset="UTF-8" />，
如果少最后的标签封闭符号/，就会报错而转到错误页。也比如你在使用Vue.js这样的库，然后有<div v-cloak></div>这样的html代码，
也会被thymeleaf认为不符合要求而抛出错误。
	因此，建议增加下面这段：
		spring.thymeleaf.mode = LEGACYHTML5
		spring.thymeleaf.mode的默认值是HTML5，其实是一个很严格的检查，改为LEGACYHTML5可以得到一个可能更友好亲切的格式要求。
	需要注意的是，LEGACYHTML5需要搭配一个额外的库NekoHTML才可用。
		<dependency>  
		       <groupId>net.sourceforge.nekohtml</groupId>  
		       <artifactId>nekohtml</artifactId>  
		       <version>1.9.22</version>  
		</dependency>
	这样，需要的配置项如下：
		# 一项是非严格的HTML检查，一项是禁用缓存来获取实时页面数据，其他采用默认项即可
		  thymeleaf:
		    mode: LEGACYHTML5
		    cache: false  
